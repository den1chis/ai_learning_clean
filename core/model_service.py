import os
import requests
from joblib import load

# –ü—É—Ç—å –∫ volume ‚Äî –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤ /app/models
MODEL_PATH = "/app/models/ai_recommendation_model.pkl"
ENCODER_PATH = "/app/models/label_encoder.pkl"

# –°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –∏ —ç–Ω–∫–æ–¥–µ—Ä–∞ –Ω–∞ Hugging Face
MODEL_URL = "https://huggingface.co/den1chik/ai-model/resolve/main/ai_recommendation_model.pkl"
ENCODER_URL = "https://huggingface.co/den1chik/ai-model/resolve/main/label_encoder.pkl"

# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–æ–¥–∏–Ω —Ä–∞–∑ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è)
_model = None
_encoder = None

def _download_if_missing(url: str, path: str):
    if not os.path.exists(path):
        print(f"[MODEL] ‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º: {url} ‚Üí {path}")
        try:
            # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã (connect 20 —Å–µ–∫, read 300 —Å–µ–∫)
            with requests.get(url, stream=True, timeout=(20, 300)) as r:
                r.raise_for_status()

                total = int(r.headers.get('content-length', 0))
                downloaded = 0

                with open(path, "wb") as f:
                    for chunk in r.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                            downloaded += len(chunk)

                size_mb = round(downloaded / 1024 / 1024, 2)
                print(f"[MODEL] ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path} ({size_mb} MB)")

        except Exception as e:
            print(f"[MODEL ERROR] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {url}: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏: {url}")

def load_model():
    global _model, _encoder
    if _model is None or _encoder is None:
        _download_if_missing(MODEL_URL, MODEL_PATH)
        _download_if_missing(ENCODER_URL, ENCODER_PATH)
        _model = load(MODEL_PATH)
        _encoder = load(ENCODER_PATH)
        print("[MODEL] ‚úÖ –ú–æ–¥–µ–ª—å –∏ —ç–Ω–∫–æ–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å.")
    return _model, _encoder

def get_prediction(features: list[float]) -> str:
    print(f"[PREDICT] üì• –í—Ö–æ–¥–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {features}")
    try:
        model, encoder = load_model()
        pred = model.predict([features])[0]
        label = encoder.inverse_transform([pred])[0]
        print(f"[PREDICT] üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ: {label}")
        return label
    except Exception as e:
        print(f"[PREDICT ERROR] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        raise RuntimeError("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
