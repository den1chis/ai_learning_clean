import os
from django.conf import settings
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, logout, authenticate
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from joblib import load
from sklearn.exceptions import NotFittedError
import numpy as np
from .forms import CustomUserCreationForm, CustomAuthenticationForm, TestForm, QuestionForm
from .models import Question, Module, UserAnswer, Recommendation, UserProgress, Lesson, LessonProgress, Task, UserTask, LessonQuiz

import os
import numpy as np
from django.shortcuts import render, redirect
from django.conf import settings
from joblib import load

from .forms import DemoTestForm
from .models import Module

from django.contrib.auth.decorators import login_required, user_passes_test

def is_admin(user):
    return user.is_authenticated and user.role == 'admin'

@login_required
@user_passes_test(is_admin)
def admin_profile_view(request):
    return render(request, 'core/admin_profile.html', {
        'admin_user': request.user
    })
from .forms import ProfileUpdateForm, CustomPasswordChangeForm
from django.contrib.auth import update_session_auth_hash
@login_required
def profile_settings(request):
    user = request.user
    profile_form = ProfileUpdateForm(instance=user)
    password_form = CustomPasswordChangeForm(user)

    if request.method == 'POST':
        if 'update_profile' in request.POST:
            profile_form = ProfileUpdateForm(request.POST, request.FILES, instance=user)
            if profile_form.is_valid():
                profile_form.save()
                messages.success(request, '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ.')
                return redirect('profile_settings')

        elif 'change_password' in request.POST:
            password_form = CustomPasswordChangeForm(user, request.POST)
            if password_form.is_valid():
                user = password_form.save()
                update_session_auth_hash(request, user)
                messages.success(request, '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.')
                return redirect('profile_settings')

    return render(request, 'core/profile_settings.html', {
        'profile_form': profile_form,
        'password_form': password_form
    })

@login_required
@user_passes_test(is_admin)
def demo_test(request):
    if request.method == 'POST':
        form = DemoTestForm(request.POST)
        if form.is_valid():
            request.session['demo_answers'] = form.cleaned_data
            return redirect('demo_result')
    else:
        form = DemoTestForm()
    return render(request, 'core/demo_test.html', {'form': form})

from django.db.models import Avg
from .models import User, UserProgress

@login_required
@user_passes_test(is_admin)
def admin_students_view(request):
    from django.db.models import Avg, Count
    from .models import Lesson, LessonProgress, Module, UserProgress

    students = User.objects.filter(role='student')
    modules = list(Module.objects.filter(course_id=1).order_by('order_index'))
    lessons = list(Lesson.objects.filter(module__in=modules))

    data = []

    for student in students:
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º
        completed_lessons = LessonProgress.objects.filter(user=student, completed=True).count()
        total_lessons = len(lessons)
        avg_percent = int((completed_lessons / total_lessons) * 100) if total_lessons > 0 else 0

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É–ª—é
        module_progresses = []
        for module in modules:
            module_lessons = [l for l in lessons if l.module_id == module.id]
            total = len(module_lessons)
            completed = LessonProgress.objects.filter(user=student, lesson__in=module_lessons, completed=True).count()
            percent = int((completed / total) * 100) if total > 0 else 0
            module_progresses.append({
                'module': module,
                'percent': percent
            })

        data.append({
            'student': student,
            'avg_progress': avg_percent,
            'module_progresses': module_progresses,
        })

    return render(request, 'core/admin_students.html', {
        'students': data,
        'modules': modules
    })


from .models import User, UserProgress, LessonProgress, Module, Lesson

@login_required
@user_passes_test(is_admin)
def admin_student_detail(request, user_id):
    student = get_object_or_404(User, id=user_id, role='student')
    modules = Module.objects.filter(course_id=1).order_by('order_index')

    module_info = []
    total_lessons = 0
    total_completed = 0

    for module in modules:
        lessons = Lesson.objects.filter(module=module).order_by('order_index')
        lessons_info = []
        completed = 0

        for lesson in lessons:
            is_done = LessonProgress.objects.filter(user=student, lesson=lesson, completed=True).exists()
            if is_done:
                completed += 1

            # –ó–∞–¥–∞–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è
            tasks = Task.objects.filter(lesson=lesson)
            task_info = []
            for t in tasks:
                ut = UserTask.objects.filter(user=student, task=t).first()
                task_info.append({
                    'task': t,
                    'user_task': ut
                })

            # –ú–∏–Ω–∏-—Ç–µ—Å—Ç—ã
            quizzes = LessonQuiz.objects.filter(lesson=lesson)
            quiz_info = []
            for quiz in quizzes:
                ua = UserAnswer.objects.filter(user=student, question_id=quiz.id).first()
                quiz_info.append({
                    'quiz': quiz,
                    'answer': ua
                })

            lessons_info.append({
                'lesson': lesson,
                'completed': is_done,
                'tasks': task_info,
                'quizzes': quiz_info
            })

        count = lessons.count()
        total_lessons += count
        total_completed += completed
        percent = round((completed / count) * 100) if count > 0 else 0

        module_info.append({
            'module': module,
            'percent': percent,
            'lessons': lessons_info
        })

    avg_progress = round((total_completed / total_lessons) * 100) if total_lessons > 0 else 0

    return render(request, 'core/admin_student_detail.html', {
        'student': student,
        'avg_progress': avg_progress,
        'module_info': module_info
    })
@login_required
@user_passes_test(is_admin)
def demo_result(request):
    data = request.session.get('demo_answers')
    if not data:
        return redirect('demo_test')

    # 1) –ú–æ–¥—É–ª–∏ –∏ demo_info —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫ –ø—Ä–µ–∂–¥–µ‚Ä¶
    modules = list(Module.objects.filter(course_id=1).order_by('order_index'))
    demo_info = []
    features = []
    for m in modules:
        cnt = max(0, min(5, data.get(f"mod_{m.id}", 0)))
        pct = int(cnt/5*100)
        demo_info.append({'module': m, 'count': cnt, 'percent': pct})
        features.append(max(pct, 20))

    # 2) –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ encoder
    model = load(os.path.join(settings.BASE_DIR, 'ai_recommendation_model.pkl'))
    le    = load(os.path.join(settings.BASE_DIR, 'label_encoder.pkl'))

    # 3) –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∫—É –∏ –ø—Ä–∏–≤–æ–¥–∏–º –µ—ë –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –º–æ–¥—É–ª—è
    pred_label = model.predict([features])[0]
    pred_name  = le.inverse_transform([pred_label])[0]

    # 4) –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥—É–ª—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    rec_module = Module.objects.get(title=pred_name)

    return render(request, 'core/demo_result.html', {
        'demo_info':  demo_info,
        'rec_module': rec_module,
    })# Create your views here.
def home(request):
    return render(request, 'core/home.html')


def register_view(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('home')
        else:
            messages.error(request, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
    else:
        form = CustomUserCreationForm()
    return render(request, 'core/register.html', {'form': form})

def login_view(request):
    if request.method == 'POST':
        form = CustomAuthenticationForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)

            # üîÅ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if user.role == 'admin':
                return redirect('admin_profile')
            return redirect('dashboard')  # —Å—Ç—É–¥–µ–Ω—Ç –∏ –¥—Ä—É–≥–∏–µ
    else:
        form = CustomAuthenticationForm()
    return render(request, 'core/login.html', {'form': form})



def logout_view(request):
    logout(request)
    return redirect('home')
from django.contrib.auth.decorators import login_required
from django.shortcuts import render
from .models import Module, Lesson, LessonProgress, Recommendation

@login_required
def dashboard_view(request):
    # 1) –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏
    modules = list(Module.objects.filter(course_id=1).order_by('order_index'))

    # 2) –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    rec = (Recommendation.objects
           .filter(user=request.user, recommendation_type='next_module')
           .order_by('-timestamp')
           .first())

    recommended_module = rec.module if rec else None

    # 3) –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
    completed_lesson_ids = set(
        LessonProgress.objects
        .filter(user=request.user, completed=True)
        .values_list('lesson_id', flat=True)
    )

    # 4) –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    all_lessons = 0
    completed_lessons = 0
    modules_info = []

    unlocked_flag = True  # –ø–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç

    for i, m in enumerate(modules):
        lessons = Lesson.objects.filter(module=m).order_by('order_index')
        lesson_ids = lessons.values_list('id', flat=True)
        total = lessons.count()
        completed = sum(1 for lid in lesson_ids if lid in completed_lesson_ids)

        all_lessons += total
        completed_lessons += completed

        modules_info.append({
            'module': m,
            'unlocked': unlocked_flag,
            'recommended': recommended_module and (m.id == recommended_module.id),
            'total_lessons': total,
            'completed_lessons': completed,
            'module_progress': int((completed / total) * 100) if total > 0 else 0
        })

        # üîí –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        if completed < total:
            unlocked_flag = False

    progress_percent = int((completed_lessons / all_lessons) * 100) if all_lessons > 0 else 0
    recent_actions = []  # –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ

    return render(request, 'core/dashboard.html', {
        'recommended_module': recommended_module,
        'modules_info': modules_info,
        'progress_percent': progress_percent,
        'recent_actions': recent_actions,
    })



@login_required
def test_view(request):
    # 1) –ø–æ 3 –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
    modules = list(Module.objects.filter(course_id=1).order_by('order_index'))
    questions = []
    for m in modules:
        questions.extend(Question.objects.filter(module=m).order_by('?')[:5])

    # 2) –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    if request.method == 'POST':
        form = TestForm(questions, data=request.POST)
        if form.is_valid():
            # 3) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –∏ —Å—á–∏—Ç–∞–µ–º
            correct = {}
            total = {}
            for q in questions:
                sel = int(form.cleaned_data[f'question_{q.id}'])
                ok = (sel == q.correct_option)
                UserAnswer.objects.create(
                    user=request.user,
                    question=q,
                    selected_option=sel,
                    is_correct=ok
                )
                mid = q.module.id
                total[mid] = total.get(mid, 0) + 1
                correct[mid] = correct.get(mid, 0) + (1 if ok else 0)

            # 4) —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ 20‚Äì100 –¥–ª—è –º–æ–¥–µ–ª–∏
            features = []
            for m in modules:
                frac = correct.get(m.id, 0) / total.get(m.id, 1)
                features.append(frac * 100)
            data = np.array([features])  # shape (1, n_modules)

            # 5) –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ —ç–Ω–∫–æ–¥–µ—Ä
            model_path   = os.path.join(settings.BASE_DIR, 'ai_recommendation_model.pkl')
            encoder_path = os.path.join(settings.BASE_DIR, 'label_encoder.pkl')
            model        = load(model_path)
            encoder      = load(encoder_path)

            # 6) –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –º–æ–¥—É–ª—è
            pred_label       = model.predict(data)[0]
            rec_module_name  = encoder.inverse_transform([pred_label])[0]

            # 7) –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª—å –ø–æ title__startswith
            rec_module = Module.objects.filter(
                title__startswith=rec_module_name
            ).order_by('order_index').first()

            # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –±–µ—Ä—ë–º –º–æ–¥—É–ª—å —Å —Ç–µ–º –∂–µ order_index, —á—Ç–æ –∏ pred_label
            if rec_module is None:
                try:
                    idx = int(pred_label)
                    rec_module = modules[idx]
                except Exception:
                    rec_module = modules[0]

            # 8) —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            Recommendation.objects.create(
                user=request.user,
                module=rec_module,
                recommendation_type='next_module',
                confidence_score=0.0
            )
            UserProgress.objects.update_or_create(
                user=request.user,
                module=rec_module,
                defaults={
                    'completion_percent': 0,
                    'recommended_difficulty': None
                }
            )

            return redirect('dashboard')
    else:
        form = TestForm(questions)

    return render(request, 'core/test.html', {
        'form': form,
        'modules': modules,
    })

@login_required
def test_start(request):
    import random
    modules = list(Module.objects.filter(course_id=1).order_by('order_index'))
    qs_ids = []

    for m in modules:
        all_ids = list(Question.objects.filter(module=m).values_list('id', flat=True))
        # —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –º–æ–¥—É–ª—å
        selected = random.sample(all_ids, min(5, len(all_ids)))
        qs_ids += selected

    request.session['test_qs'] = qs_ids
    request.session['test_ans'] = []
    return redirect('test_question', idx=0)


@login_required
def test_question(request, idx):
    qs_ids = request.session.get('test_qs', [])
    total = len(qs_ids)

    if idx >= total:
        return redirect('test_loading')

    q = get_object_or_404(Question, pk=qs_ids[idx])

    # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    current = idx + 1
    progress = round(current / total * 100)

    if request.method == 'POST':
        # 1) –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º sel=0 (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
        if 'skip' in request.POST:
            ans = request.session.get('test_ans', [])
            ans.append({'q_id': q.id, 'sel': 0})
            request.session['test_ans'] = ans
            return redirect('test_question', idx=idx+1)

        # 2) –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
        form = QuestionForm(q, data=request.POST)
        if form.is_valid():
            sel = int(form.cleaned_data['choice'])
            ans = request.session.get('test_ans', [])
            ans.append({'q_id': q.id, 'sel': sel})
            request.session['test_ans'] = ans
            return redirect('test_question', idx=idx+1)
    else:
        form = QuestionForm(q)

    return render(request, 'core/test_question.html', {
        'form': form,
        'question': q,
        'current': current,
        'total': total,
        'progress': progress,
    })


@login_required
def test_loading(request):
    # –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å ‚Äú–∑–∞–≥—Ä—É–∑–∫–æ–π‚Äù
    return render(request, 'core/test_loading.html')

import os
import numpy as np
from django.conf import settings
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from joblib import load

from .models import Module, Question, UserAnswer, Recommendation, UserProgress
@login_required
def test_result(request):
    from joblib import load
    import os
    import numpy as np
    from .models import Module, Question, UserAnswer, Recommendation, UserProgress

    qs_ids = request.session.pop('test_qs', [])
    answers = request.session.pop('test_ans', [])

    modules = list(Module.objects.filter(course_id=1).order_by('order_index'))
    total = {}
    correct = {}

    seen_q_ids = set()

    for a in answers:
        q_id = a['q_id']
        if q_id in seen_q_ids:
            continue  # ‚õî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        seen_q_ids.add(q_id)

        q = Question.objects.get(pk=q_id)
        sel = a['sel']
        is_ok = (sel == q.correct_option) if sel in (1, 2, 3, 4) else False
        selected = sel if sel in (1, 2, 3, 4) else None

        UserAnswer.objects.create(
            user=request.user,
            question=q,
            selected_option=selected,
            is_correct=is_ok
        )

        mid = q.module.id
        total[mid] = total.get(mid, 0) + 1
        correct[mid] = correct.get(mid, 0) + (1 if is_ok else 0)

    features = np.array([[ 
        max((correct.get(m.id, 0) / total.get(m.id, 1)) * 100, 20) 
        for m in modules
    ]])

    model_path = os.path.join(settings.BASE_DIR, 'ai_recommendation_model.pkl')
    encoder_path = os.path.join(settings.BASE_DIR, 'label_encoder.pkl')
    model = load(model_path)
    encoder = load(encoder_path)

    try:
        pred_label = model.predict(features)[0]
        rec_name = encoder.inverse_transform([pred_label])[0]
        rec_module = Module.objects.get(title=rec_name)
    except:
        rec_module = modules[0]

    Recommendation.objects.create(
        user=request.user,
        module=rec_module,
        recommendation_type='next_module',
        confidence_score=0.0
    )
    UserProgress.objects.update_or_create(
        user=request.user,
        module=rec_module,
        defaults={'completion_percent': 0, 'recommended_difficulty': None}
    )

    demo_info = []
    for m in modules:
        cnt = total.get(m.id, 0)
        pct = int((correct.get(m.id, 0) / cnt) * 100) if cnt else 0
        demo_info.append({
            'module': m,
            'count': correct.get(m.id, 0),
            'percent': pct
        })

    return render(request, 'core/test_result.html', {
        'rec_module': rec_module,
        'demo_info': demo_info
    })




from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from core.models import Module, Lesson, LessonProgress

@login_required
def module_lessons_view(request, module_id):
    module = get_object_or_404(Module, id=module_id)
    lessons = list(Lesson.objects.filter(module=module).order_by('order_index'))

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º
    progress_qs = LessonProgress.objects.filter(user=request.user, lesson__in=lessons)
    progress_map = {lp.lesson_id: lp.completed for lp in progress_qs}

    lessons_info = []
    unlocked_flag = True
    current_lesson_id = None

    for lesson in lessons:
        completed = progress_map.get(lesson.id, False)

        # —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
        if not completed and current_lesson_id is None:
            current_lesson_id = lesson.id

        lessons_info.append({
            'lesson': lesson,
            'completed': completed,
            'unlocked': unlocked_flag
        })

        # –µ—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω, –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        if not completed:
            unlocked_flag = False

        # –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
    total_lessons = len(lessons)
    completed_lessons = sum(1 for l in lessons if progress_map.get(l.id))
    module_progress = int((completed_lessons / total_lessons) * 100) if total_lessons > 0 else 0


    return render(request, 'core/module_lessons.html', {
        'module': module,
        'lessons_info': lessons_info,
        'module_progress': module_progress,
        'total_lessons': total_lessons,
        'completed_lessons': completed_lessons,
    })



import subprocess


from django.http import JsonResponse

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from core.models import Lesson, Task, UserTask, LessonQuiz, LessonProgress, Module




def check_user_code(request, tasks, user_tasks_dict):
    import tempfile
    import subprocess
    import os

    task_id = int(request.POST.get("task_id", 0))
    code = request.POST.get("code", "")
    task = next((t for t in tasks if t.id == task_id), None)

    if not task:
        return {"output": "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", "is_correct": False, "task_id": task_id}

    with tempfile.NamedTemporaryFile(delete=False, suffix=".py", mode='w', encoding='utf-8') as temp_file:
        temp_file.write(code)
        temp_path = temp_file.name

    try:
        result = subprocess.run(
            ["python", temp_path],
            capture_output=True,
            text=True,
            timeout=5
        )
        stdout = result.stdout.strip()
        stderr = result.stderr.strip()
        output = stdout if stdout else stderr
        hint = ""

        if "NameError" in stderr and "is not defined" in stderr:
            if "pront" in stderr:
                hint = "üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É <code>print</code>, –∞ –Ω–µ <code>pront</code>?"
            else:
                hint = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º—ë–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π."
        elif "SyntaxError" in stderr:
            hint = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è, –∫–∞–≤—ã—á–µ–∫ –∏–ª–∏ —Å–∫–æ–±–æ–∫."
        elif "IndentationError" in stderr:
            hint = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—Ç—É–ø—ã: Python —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –ø—Ä–æ–±–µ–ª–∞–º –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫."
        elif "TypeError" in stderr:
            hint = "üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ –¥–ª—è —Ç–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö."

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—ã–≤–æ–¥
        if hint:
            output += "\n\n=== –ü–û–î–°–ö–ê–ó–ö–ê ===\n" + hint


        is_correct = stdout == (task.expected_output or "").strip()

    except subprocess.TimeoutExpired:
        output = "‚è± –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        is_correct = False
    except Exception as e:
        output = f"–û—à–∏–±–∫–∞: {str(e)}"
        is_correct = False
    finally:
        os.remove(temp_path)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    user_task = user_tasks_dict.get(task_id)
    if user_task:
        user_task.code = code
        user_task.output = output
        user_task.is_correct = is_correct
        user_task.save()
    else:
        user_task = UserTask.objects.create(
            user=request.user,
            task=task,
            code=code,
            output=output,
            is_correct=is_correct,
            attempts = 1
        )
        user_tasks_dict[task_id] = user_task

    return {
        "output": output,
        "is_correct": is_correct,
        "task_id": task_id,
    }

from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from core.models import Lesson, Task, UserTask, LessonProgress, LessonQuiz

import subprocess
import tempfile

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from core.models import Lesson, Task, UserTask, LessonProgress, LessonQuiz, Module

import subprocess
import tempfile
import os


@login_required
def lesson_by_index_view(request, module_id, order_index):
    lesson = get_object_or_404(Lesson, module_id=module_id, order_index=order_index)
    module = lesson.module
    tasks = Task.objects.filter(lesson=lesson)
    quizzes = LessonQuiz.objects.filter(lesson=lesson)
    user_tasks = {ut.task_id: ut for ut in UserTask.objects.filter(user=request.user, task__in=tasks)}
    progress, _ = LessonProgress.objects.get_or_create(user=request.user, lesson=lesson)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –∏ –º–æ–¥—É–ª—å
    next_lesson = Lesson.objects.filter(module=module, order_index__gt=lesson.order_index).order_by('order_index').first()
    is_last_lesson = not next_lesson
    next_module = None
    first_lesson_next_module = None

    if is_last_lesson:
        next_module = Module.objects.filter(order_index__gt=module.order_index).order_by('order_index').first()
        if next_module:
            first_lesson_next_module = Lesson.objects.filter(module=next_module).order_by('order_index').first()

    # ‚úÖ AJAX: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–ª–∏ –∑–∞–ø—É—Å–∫ –∫–æ–¥–∞
    if request.headers.get("x-requested-with") == "XMLHttpRequest":
        if 'complete_lesson' in request.POST:
            all_tasks_correct = all(
                user_tasks.get(task.id) and user_tasks[task.id].is_correct
                for task in tasks
            )
            correct_quiz_count = 0
            for quiz in quizzes:
                answer = request.POST.get(f'q{quiz.id}')
                if answer and int(answer) == quiz.correct_option:
                    correct_quiz_count += 1
            test_passed = (correct_quiz_count == len(quizzes)) if quizzes else True

            if all_tasks_correct and test_passed:
                progress.completed = True
                progress.save()

                if next_lesson:
                    LessonProgress.objects.get_or_create(user=request.user, lesson=next_lesson)
                elif first_lesson_next_module:
                    LessonProgress.objects.get_or_create(user=request.user, lesson=first_lesson_next_module)

                return JsonResponse({"success": True})
            return JsonResponse({"success": False})

        # ‚úÖ –∑–∞–ø—É—Å–∫ –∫–æ–¥–∞
        task_id = request.POST.get("task_id")
        code = request.POST.get("code")
        task_level = request.POST.get("task_level", "default")
        output = ""
        is_correct = False
        hint = ""

        try:
            task = Task.objects.get(id=task_id)

            with tempfile.NamedTemporaryFile(delete=False, suffix=".py", mode='w', encoding='utf-8') as temp_file:
                temp_file.write(code)
                temp_path = temp_file.name

            result = subprocess.run(
                ["python", temp_path],
                capture_output=True,
                text=True,
                timeout=5
            )
            stdout = result.stdout.strip()
            stderr = result.stderr.strip()
            output = stdout if stdout else stderr

            # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ç–∏–ø–æ–≤—ã–º –æ—à–∏–±–∫–∞–º
            if "NameError" in stderr and "is not defined" in stderr:
                if "pront" in stderr:
                    hint = "üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É <code>print</code>, –∞ –Ω–µ <code>pront</code>?"
                else:
                    hint = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º—ë–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π."
            elif "SyntaxError" in stderr:
                hint = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–∞–≤—ã—á–µ–∫, —Å–∫–æ–±–æ–∫ –∏–ª–∏ –¥–≤–æ–µ—Ç–æ—á–∏—è."
            elif "IndentationError" in stderr:
                hint = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—Ç—É–ø—ã: Python —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –ø—Ä–æ–±–µ–ª–∞–º –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫."
            elif "TypeError" in stderr:
                hint = "üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö."

            # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥ –ø–æ —É—Ä–æ–≤–Ω—é
            if task_level == "easy":
                expected = (task.expected_output_easy or "").strip()
            elif task_level == "hard":
                expected = (task.expected_output_hard or "").strip()
            else:
                expected = (task.expected_output or "").strip()

            is_correct = stdout == expected

            user_task, created = UserTask.objects.get_or_create(user=request.user, task=task)
            user_task.code = code
            user_task.output = output
            user_task.is_correct = is_correct
            if created:
                user_task.attempts = 1  # –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
            else:
                user_task.attempts += 1  # –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ
            user_task.save()
        except Exception as e:
            output = f"–û—à–∏–±–∫–∞: {str(e)}"
            is_correct = False
        finally:
            if os.path.exists(temp_path):
                os.remove(temp_path)

        return JsonResponse({
            "output": output,
            "is_correct": is_correct,
            "hint": hint
        })

    # POST –±–µ–∑ AJAX (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
    if request.method == 'POST' and 'complete_lesson' in request.POST:
        return redirect('lesson_detail', module_id=module.id, order_index=order_index)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    expected_easy = {t.id: t.expected_output_easy for t in tasks}
    expected_hard = {t.id: t.expected_output_hard for t in tasks}
    task_easy_map = {t.id: t.description_easy for t in tasks}
    task_hard_map = {t.id: t.description_hard for t in tasks}

    all_modules = Module.objects.prefetch_related('lesson_set').order_by('order_index')
    all_lesson_progress = LessonProgress.objects.filter(user=request.user)
    lesson_progress_map = {lp.lesson_id: lp for lp in all_lesson_progress}

    return render(request, 'core/lesson_detail.html', {
        'lesson': lesson,
        'module': module,
        'tasks': tasks,
        'quizzes': quizzes,
        'user_tasks': user_tasks,
        'progress': progress,
        'next_lesson': next_lesson,
        'is_last_lesson': is_last_lesson,
        'next_module': next_module,
        'first_lesson_next_module': first_lesson_next_module,
        'all_modules': all_modules,
        'lesson_progress': lesson_progress_map,
        'current_lesson_id': lesson.id,
        'lesson_easy': lesson.content_html_easy,
        'lesson_hard': lesson.content_html_hard,
        'expected_easy': expected_easy,
        'expected_hard': expected_hard,
        'task_easy_map': task_easy_map,
        'task_hard_map': task_hard_map,
    })




from .models import Course, Lesson, Task
from .forms import CourseForm, ModuleForm, LessonForm, TaskForm, LessonQuizForm
from django.contrib.auth.decorators import user_passes_test

def is_admin(user):
    return user.is_authenticated and user.role in ('admin', 'teacher')

@login_required
@user_passes_test(is_admin)
def manage_courses(request):
    courses = Course.objects.all()
    return render(request, 'core/manage_courses.html', {'courses': courses})

@login_required
@user_passes_test(is_admin)
def add_course(request):
    if request.method == 'POST':
        form = CourseForm(request.POST)
        if form.is_valid():
            course = form.save(commit=False)
            course.created_by = request.user
            course.save()
            return redirect('manage_courses')
    else:
        form = CourseForm()
    return render(request, 'core/course_form.html', {'form': form, 'title': '–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å'})

@login_required
@user_passes_test(is_admin)
def edit_course(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    if request.method == 'POST':
        form = CourseForm(request.POST, instance=course)
        if form.is_valid():
            form.save()
            return redirect('manage_courses')
    else:
        form = CourseForm(instance=course)

    return render(request, 'core/course_form.html', {
        'form': form,
        'title': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å',
        'course': course  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
    })


@login_required
@user_passes_test(is_admin)
def delete_course(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    if request.method == 'POST':
        course.delete()
        return redirect('manage_courses')
    return render(request, 'core/confirm_delete.html', {'object': course, 'title': '–£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å'})


@login_required
@user_passes_test(is_admin)
def manage_modules(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    modules = Module.objects.filter(course=course).order_by('order_index')
    return render(request, 'core/manage_modules.html', {'course': course, 'modules': modules})


@login_required
@user_passes_test(is_admin)
def add_module(request):
    course_id = request.GET.get('course')
    course = get_object_or_404(Course, id=course_id)

    if request.method == 'POST':
        form = ModuleForm(request.POST)
        if form.is_valid():
            module = form.save(commit=False)
            module.course = course
            module.save()
            return redirect('manage_modules', course_id=course.id)
    else:
        form = ModuleForm()

    return render(request, 'core/module_form.html', {'form': form, 'title': '–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å', 'course': course})

@login_required
@user_passes_test(is_admin)
def edit_module(request, module_id):
    module = get_object_or_404(Module, id=module_id)

    if request.method == 'POST':
        form = ModuleForm(request.POST, instance=module)
        if form.is_valid():
            form.save()
            return redirect('manage_modules', course_id=module.course.id)
    else:
        form = ModuleForm(instance=module)

    return render(request, 'core/module_form.html', {
        'form': form,
        'title': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å',
        'module': module  # ‚Üê —ç—Ç–æ –≤–∞–∂–Ω–æ
    })


@login_required
@user_passes_test(is_admin)
def manage_tasks(request, lesson_id):
    lesson = get_object_or_404(Lesson, id=lesson_id)
    tasks = Task.objects.filter(lesson=lesson)
    return render(request, 'core/manage_tasks.html', {'lesson': lesson, 'tasks': tasks})


@login_required
@user_passes_test(is_admin)
def add_task(request):
    lesson_id = request.GET.get('lesson')
    lesson = get_object_or_404(Lesson, id=lesson_id)

    if request.method == 'POST':
        form = TaskForm(request.POST)
        if form.is_valid():
            task = form.save(commit=False)
            task.lesson = lesson
            task.module = lesson.module  # –≤–∞–∂–Ω–æ: –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π module
            task.save()
            return redirect('manage_tasks', lesson_id=lesson.id)
    else:
        form = TaskForm()

    return render(request, 'core/task_form.html', {
        'form': form,
        'lesson': lesson,
        'title': '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ'
    })


@login_required
@user_passes_test(is_admin)
def edit_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    lesson = task.lesson

    if request.method == 'POST':
        form = TaskForm(request.POST, instance=task)
        if form.is_valid():
            form.save()
            return redirect('manage_tasks', lesson_id=lesson.id)
    else:
        form = TaskForm(instance=task)

    return render(request, 'core/task_form.html', {'form': form, 'lesson': lesson, 'title': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ'})


@login_required
@user_passes_test(is_admin)
def delete_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    lesson = task.lesson

    if request.method == 'POST':
        task.delete()
        return redirect('manage_tasks', lesson_id=lesson.id)

    return render(request, 'core/confirm_delete.html', {'object': task, 'title': '–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ'})


@login_required
@user_passes_test(is_admin)
def delete_module(request, module_id):
    module = get_object_or_404(Module, id=module_id)
    course = module.course

    if request.method == 'POST':
        module.delete()
        return redirect('manage_modules', course_id=course.id)

    return render(request, 'core/confirm_delete.html', {'object': module, 'title': '–£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å'})


@login_required
@user_passes_test(is_admin)
def manage_lessons(request, module_id):
    module = get_object_or_404(Module, id=module_id)
    lessons = Lesson.objects.filter(module=module).order_by('order_index')
    return render(request, 'core/manage_lessons.html', {'module': module, 'lessons': lessons})


@login_required
@user_passes_test(is_admin)
def add_lesson(request):
    module_id = request.GET.get('module')
    module = get_object_or_404(Module, id=module_id)

    if request.method == 'POST':
        form = LessonForm(request.POST)
        if form.is_valid():
            lesson = form.save(commit=False)
            lesson.module = module
            lesson.save()
            return redirect('manage_lessons', module_id=module.id)
    else:
        form = LessonForm()

    return render(request, 'core/lesson_form.html', {'form': form, 'title': '–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫', 'module': module})


@login_required
@user_passes_test(is_admin)
def edit_lesson(request, lesson_id):
    lesson = get_object_or_404(Lesson, id=lesson_id)
    module = lesson.module
    tasks = Task.objects.filter(lesson=lesson)
    quizzes = LessonQuiz.objects.filter(lesson=lesson)

    if request.method == 'POST':
        form = LessonForm(request.POST, instance=lesson)
        if form.is_valid():
            form.save()
            return redirect('manage_lessons', module_id=module.id)
    else:
        form = LessonForm(instance=lesson)

    return render(request, 'core/lesson_form.html', {
        'form': form,
        'title': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫',
        'module': module,
        'lesson': lesson,
        'tasks': tasks,
        'quizzes': quizzes,
    })


@login_required
@user_passes_test(is_admin)
def delete_lesson(request, lesson_id):
    lesson = get_object_or_404(Lesson, id=lesson_id)
    module = lesson.module

    if request.method == 'POST':
        lesson.delete()
        return redirect('manage_lessons', module_id=module.id)

    return render(request, 'core/confirm_delete.html', {'object': lesson, 'title': '–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫'})


@login_required
@user_passes_test(is_admin)
def manage_quizzes(request, lesson_id):
    lesson = get_object_or_404(Lesson, id=lesson_id)
    quizzes = LessonQuiz.objects.filter(lesson=lesson)
    return render(request, 'core/manage_quizzes.html', {'lesson': lesson, 'quizzes': quizzes})


@login_required
@user_passes_test(is_admin)
def add_quiz(request):
    lesson_id = request.GET.get('lesson')
    lesson = get_object_or_404(Lesson, id=lesson_id)

    if request.method == 'POST':
        form = LessonQuizForm(request.POST)
        if form.is_valid():
            quiz = form.save(commit=False)
            quiz.lesson = lesson
            quiz.save()
            return redirect('manage_quizzes', lesson_id=lesson.id)
    else:
        form = LessonQuizForm()

    return render(request, 'core/quiz_form.html', {'form': form, 'lesson': lesson, 'title': '–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å'})


@login_required
@user_passes_test(is_admin)
def edit_quiz(request, quiz_id):
    quiz = get_object_or_404(LessonQuiz, id=quiz_id)
    lesson = quiz.lesson

    if request.method == 'POST':
        form = LessonQuizForm(request.POST, instance=quiz)
        if form.is_valid():
            form.save()
            return redirect('manage_quizzes', lesson_id=lesson.id)
    else:
        form = LessonQuizForm(instance=quiz)

    return render(request, 'core/quiz_form.html', {'form': form, 'lesson': lesson, 'title': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å'})


@login_required
@user_passes_test(is_admin)
def delete_quiz(request, quiz_id):
    quiz = get_object_or_404(LessonQuiz, id=quiz_id)
    lesson = quiz.lesson

    if request.method == 'POST':
        quiz.delete()
        return redirect('manage_quizzes', lesson_id=lesson.id)

    return render(request, 'core/confirm_delete.html', {'object': quiz, 'title': '–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å'})


