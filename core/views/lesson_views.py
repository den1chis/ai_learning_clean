import os
import subprocess
import tempfile

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse

from core.models import (
    Module, Lesson, Task, UserTask,
    LessonProgress, LessonQuiz
)


@login_required
def module_lessons_view(request, module_id):
    module = get_object_or_404(Module, id=module_id)
    lessons = list(Lesson.objects.filter(module=module).order_by('order_index'))

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º
    progress_qs = LessonProgress.objects.filter(user=request.user, lesson__in=lessons)
    progress_map = {lp.lesson_id: lp.completed for lp in progress_qs}

    lessons_info = []
    unlocked_flag = True
    current_lesson_id = None

    for lesson in lessons:
        completed = progress_map.get(lesson.id, False)

        # —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
        if not completed and current_lesson_id is None:
            current_lesson_id = lesson.id

        lessons_info.append({
            'lesson': lesson,
            'completed': completed,
            'unlocked': unlocked_flag
        })

        # –µ—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω, –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        if not completed:
            unlocked_flag = False

        # –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
    total_lessons = len(lessons)
    completed_lessons = sum(1 for l in lessons if progress_map.get(l.id))
    module_progress = int((completed_lessons / total_lessons) * 100) if total_lessons > 0 else 0


    return render(request, 'core/module_lessons.html', {
        'module': module,
        'lessons_info': lessons_info,
        'module_progress': module_progress,
        'total_lessons': total_lessons,
        'completed_lessons': completed_lessons,
    })



@login_required
def lesson_by_index_view(request, module_id, order_index):
    lesson = get_object_or_404(Lesson, module_id=module_id, order_index=order_index)
    module = lesson.module
    tasks = Task.objects.filter(lesson=lesson)
    quizzes = LessonQuiz.objects.filter(lesson=lesson)
    user_tasks = {ut.task_id: ut for ut in UserTask.objects.filter(user=request.user, task__in=tasks)}
    progress, _ = LessonProgress.objects.get_or_create(user=request.user, lesson=lesson)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –∏ –º–æ–¥—É–ª—å
    next_lesson = Lesson.objects.filter(module=module, order_index__gt=lesson.order_index).order_by('order_index').first()
    is_last_lesson = not next_lesson
    next_module = None
    first_lesson_next_module = None

    if is_last_lesson:
        next_module = Module.objects.filter(order_index__gt=module.order_index).order_by('order_index').first()
        if next_module:
            first_lesson_next_module = Lesson.objects.filter(module=next_module).order_by('order_index').first()

    # ‚úÖ AJAX: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–ª–∏ –∑–∞–ø—É—Å–∫ –∫–æ–¥–∞
    if request.headers.get("x-requested-with") == "XMLHttpRequest":
        if 'complete_lesson' in request.POST:
            all_tasks_correct = all(
                user_tasks.get(task.id) and user_tasks[task.id].is_correct
                for task in tasks
            )
            correct_quiz_count = 0
            for quiz in quizzes:
                answer = request.POST.get(f'q{quiz.id}')
                if answer and int(answer) == quiz.correct_option:
                    correct_quiz_count += 1
            test_passed = (correct_quiz_count == len(quizzes)) if quizzes else True

            if all_tasks_correct and test_passed:
                progress.completed = True
                progress.save()

                if next_lesson:
                    LessonProgress.objects.get_or_create(user=request.user, lesson=next_lesson)
                elif first_lesson_next_module:
                    LessonProgress.objects.get_or_create(user=request.user, lesson=first_lesson_next_module)

                return JsonResponse({"success": True})
            return JsonResponse({"success": False})

        # ‚úÖ –∑–∞–ø—É—Å–∫ –∫–æ–¥–∞
        task_id = request.POST.get("task_id")
        code = request.POST.get("code")
        task_level = request.POST.get("task_level", "default")
        output = ""
        is_correct = False
        hint = ""

        try:
            task = Task.objects.get(id=task_id)

            with tempfile.NamedTemporaryFile(delete=False, suffix=".py", mode='w', encoding='utf-8') as temp_file:
                temp_file.write(code)
                temp_path = temp_file.name

            result = subprocess.run(
                ["python", temp_path],
                capture_output=True,
                text=True,
                timeout=5
            )
            stdout = result.stdout.strip()
            stderr = result.stderr.strip()
            output = stdout if stdout else stderr

            # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ç–∏–ø–æ–≤—ã–º –æ—à–∏–±–∫–∞–º
            if "NameError" in stderr and "is not defined" in stderr:
                if "pront" in stderr:
                    hint = "üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É <code>print</code>, –∞ –Ω–µ <code>pront</code>?"
                else:
                    hint = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º—ë–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π."
            elif "SyntaxError" in stderr:
                hint = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–∞–≤—ã—á–µ–∫, —Å–∫–æ–±–æ–∫ –∏–ª–∏ –¥–≤–æ–µ—Ç–æ—á–∏—è."
            elif "IndentationError" in stderr:
                hint = "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—Ç—É–ø—ã: Python —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –ø—Ä–æ–±–µ–ª–∞–º –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫."
            elif "TypeError" in stderr:
                hint = "üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö."

            # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥ –ø–æ —É—Ä–æ–≤–Ω—é
            if task_level == "easy":
                expected = (task.expected_output_easy or "").strip()
            elif task_level == "hard":
                expected = (task.expected_output_hard or "").strip()
            else:
                expected = (task.expected_output or "").strip()

            is_correct = stdout == expected

            user_task, created = UserTask.objects.get_or_create(user=request.user, task=task)
            user_task.code = code
            user_task.output = output
            user_task.is_correct = is_correct
            if created:
                user_task.attempts = 1  # –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
            else:
                user_task.attempts += 1  # –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ
            user_task.save()
        except Exception as e:
            output = f"–û—à–∏–±–∫–∞: {str(e)}"
            is_correct = False
        finally:
            if os.path.exists(temp_path):
                os.remove(temp_path)

        return JsonResponse({
            "output": output,
            "is_correct": is_correct,
            "hint": hint
        })

    # POST –±–µ–∑ AJAX (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
    if request.method == 'POST' and 'complete_lesson' in request.POST:
        return redirect('lesson_detail', module_id=module.id, order_index=order_index)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    expected_easy = {t.id: t.expected_output_easy for t in tasks}
    expected_hard = {t.id: t.expected_output_hard for t in tasks}
    task_easy_map = {t.id: t.description_easy for t in tasks}
    task_hard_map = {t.id: t.description_hard for t in tasks}

    all_modules = Module.objects.prefetch_related('lesson_set').order_by('order_index')
    all_lesson_progress = LessonProgress.objects.filter(user=request.user)
    lesson_progress_map = {lp.lesson_id: lp for lp in all_lesson_progress}

    return render(request, 'core/lesson_detail.html', {
        'lesson': lesson,
        'module': module,
        'tasks': tasks,
        'quizzes': quizzes,
        'user_tasks': user_tasks,
        'progress': progress,
        'next_lesson': next_lesson,
        'is_last_lesson': is_last_lesson,
        'next_module': next_module,
        'first_lesson_next_module': first_lesson_next_module,
        'all_modules': all_modules,
        'lesson_progress': lesson_progress_map,
        'current_lesson_id': lesson.id,
        'lesson_easy': lesson.content_html_easy,
        'lesson_hard': lesson.content_html_hard,
        'expected_easy': expected_easy,
        'expected_hard': expected_hard,
        'task_easy_map': task_easy_map,
        'task_hard_map': task_hard_map,
    })